1.When would you want to use a remote repository rather than keeping all your work local?
ans-We use the remote respository to collaborate with different contributers around the world
    and to make our project public and allow others to contribute it.

2.Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
ans-becoz the local respository and remote needs manual syncing.

3.Describe the differences between forks, clones, and branches. When would you use one instead of another?
ans-clone-> are used when u want copy of repo from githubserver or to another location on ur computer.
----
branch-> are use in repo only to work parallelly on different features of project or experimental features then we can merge them too.
---
forks->They are used to make the copy of someone other's remote to our github remote at githubservers

4.What is the benefit of having a copy of the last known state of the remote stored locally?
ans-even if someone do the changes in github branch then we can still access our local branch and person's branch who updated it on github by running $git fetch origin(name of remote), this command will create the diverged branch from last known state of remote stored locally. we can even merge the twp branches by $ git merge master origin/master

5.How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
ans=If I had to collaborate on a coding project without using Git or GitHub (or
    any other form of version control designed for code), I might suggest that
    we all make changes to a shared folder, for example, a DropBox folder.  This
    would be a ligter-weight solution than using Git and GitHub.  However, if we
    both wanted to work on the same part of the file, it would be very difficult
    to avoid clobbering each other's changes.

    Real-time collaborative editors like Google Docs are also great for
    collaboration, but I don't know a good version of Google Docs for code.
    Even if I did, I would be hesitant to use this approach on code that it's
    important to keep bug-free.  I would be worried that someone else would add
    a change that combined with my change to make a bug, and I might not even
    notice their change!